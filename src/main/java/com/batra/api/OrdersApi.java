/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.batra.api;

import com.batra.entities.Myorder;
import com.batra.model.OrderListResponse;
import com.batra.model.OrderResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Validated
public interface OrdersApi {
    /***
     *
     * @param username
     * @return
     */
    @Operation(summary = "Get Order List", description = "Get Order List", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Pending Applications object get successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrderListResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Data not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/orders/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrderListResponse> ordersUsernameGet(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("username") String username);

    /****
     *
     * @param orderId
     * @return
     */

    @Operation(summary = "Get Order by Id", description = "Get Order List", tags={ "order" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Pending Applications object get successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponse.class))),

            @ApiResponse(responseCode = "404", description = "Data not found.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),

            @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/order/{orderId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<OrderResponse> ordersOrderIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderId") Long orderId);


}

